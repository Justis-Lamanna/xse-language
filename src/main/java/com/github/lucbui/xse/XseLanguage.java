package com.github.lucbui.xse;

import com.github.lucbui.xse.language.*;
import com.github.lucbui.xse.language.builder.*;
import com.github.lucbui.xse.language.parameter.*;

public class XseLanguage {
    private static final String UNKNOWN_COMMAND = "This command is currently under investigation. No detailed information is available at this time";
	private static final String UNKNOWN_PARAMETER = "???";

	/**
	 * Version 1 of the XSE language, exactly as it works in the original XSE.
	 */
    public static final Language V1  = new LanguageBuilder()
			.withCommand(new BasicCommandBuilder("nop")
					.withDescription("Does absolutely nothing"))
			.withCommand(new BasicCommandBuilder("nop1")
					.withDescription("Does absolutely nothing"))
			.withCommand(new BasicCommandBuilder("end")
					.withDescription("Ends the execution of the script"))
			.withCommand(new BasicCommandBuilder("return")
					.withDescription("Pops back to the last calling command used"))
			.withCommand(new BasicCommandBuilder("call")
					.withDescription("Continues script execution from another point. Can be returned to.")
					.withParam(CommandParameter.POINTER, "Pointer to continue from"))
			.withCommand(new BasicCommandBuilder("goto")
					.withDescription("Continues script execution from another point")
					.withParam(CommandParameter.POINTER, "Pointer to continue from"))
			.withCommand(new BasicCommandBuilder("if1")
					.withDescription("If the last comparison returned a certain value, jumps to another script")
					.withParam(CommandParameter.BYTE, "Condition")
					.withParam(CommandParameter.POINTER, "Pointer to go to"))
			.withCommand(new BasicCommandBuilder("if2")
					.withDescription("Calling version of the if command")
					.withParam(CommandParameter.BYTE, "Condition")
					.withParam(CommandParameter.POINTER, "Pointer to call"))
			.withCommand(new BasicCommandBuilder("gotostd")
					.withDescription("Jumps to a built-in function")
					.withParam(CommandParameter.BYTE, "Function # to jump to"))
			.withCommand(new BasicCommandBuilder("callstd")
					.withDescription("Calls a built-in function")
					.withParam(CommandParameter.BYTE, "Function # to jump to"))
			.withCommand(new BasicCommandBuilder("gotostdif")
					.withDescription("Jumps to a built-in function, conditional version")
					.withParam(CommandParameter.BYTE, "Condition")
					.withParam(CommandParameter.BYTE, "Function # to jump to"))
			.withCommand(new BasicCommandBuilder("callstdif")
					.withDescription("Jumps to a built-in function, conditional version")
					.withParam(CommandParameter.BYTE, "Condition")
					.withParam(CommandParameter.BYTE, "Function # to call"))
			.withCommand(new BasicCommandBuilder("jumpram")
					.withDescription("Jumps to a default RAM location, executing the script stored there."))
			.withCommand(new BasicCommandBuilder("killscript")
					.withDescription("Kills the script and resets the script RAM"))
			.withCommand(new BasicCommandBuilder("setbyte")
					.withDescription("Sets a predefined address to the specified byte value")
					.withParam(CommandParameter.BYTE, "Byte value to use"))
			.withCommand(new BasicCommandBuilder("loadpointer")
					.withDescription("Loads a pointer into the script RAM so other commands can use it")
					.withParam(CommandParameter.BYTE, "Memory bank to use")
					.withParam(CommandParameter.POINTER, "Pointer to load into memory"))
			.withCommand(new BasicCommandBuilder("setbyte2")
					.withDescription("Sets a memory bank to the specified byte value")
					.withParam(CommandParameter.BYTE, "Memory bank to use")
					.withParam(CommandParameter.BYTE, "Byte value to use"))
			.withCommand(new BasicCommandBuilder("writebytetooffset")
					.withDescription("Sets the byte at the specified offset to a certain value")
					.withParam(CommandParameter.BYTE, "Byte value to write")
					.withParam(CommandParameter.POINTER, "Location to write it to"))
			.withCommand(new BasicCommandBuilder("loadbytefrompointer")
					.withDescription("Loads the byte found at a pointer into the script RAM so other commands can use it")
					.withParam(CommandParameter.BYTE, "Memory bank to use")
					.withParam(CommandParameter.POINTER, "Pointer to byte to load into memory"))
			.withCommand(new BasicCommandBuilder("setfarbyte")
					.withDescription("Set the byte into a specified pointer")
					.withParam(CommandParameter.BYTE, "Memory bank to use")
					.withParam(CommandParameter.POINTER, "Pointer to write byte to"))
			.withCommand(new BasicCommandBuilder("copyscriptbanks")
					.withDescription("Copies one script bank to another")
					.withParam(CommandParameter.BYTE, "Bank #1 - Destination")
					.withParam(CommandParameter.BYTE, "Bank #2 - Source"))
			.withCommand(new BasicCommandBuilder("copybyte")
					.withDescription("Copies a byte value from one place to another")
					.withParam(CommandParameter.POINTER, "Destination byte location")
					.withParam(CommandParameter.POINTER, "Source byte location"))
			.withCommand(new BasicCommandBuilder("setvar")
					.withDescription("Sets variable A to any value")
					.withParam(CommandParameter.VARIABLE, "Variable A")
					.withParam(CommandParameter.WORD, "Value to set A to"))
			.withCommand(new BasicCommandBuilder("addvar")
					.withDescription("Adds any value to variable A")
					.withParam(CommandParameter.VARIABLE, "Variable A")
					.withParam(CommandParameter.WORD, "Value to add to A"))
			.withCommand(new BasicCommandBuilder("subvar")
					.withDescription("Subtracts any value from variable A")
					.withParam(CommandParameter.VARIABLE, "Variable A")
					.withParam(CommandParameter.WORD, "Value to subtract from A"))
			.withCommand(new BasicCommandBuilder("copyvar")
					.withDescription("Copies variable B to A")
					.withParam(CommandParameter.VARIABLE, "Variable A - Destination")
					.withParam(CommandParameter.VARIABLE, "Variable B - Source"))
			.withCommand(new BasicCommandBuilder("copyvarifnotzero")
					.withDescription("Sets variable B to A, but only if B is higher than 0")
					.withParam(CommandParameter.VARIABLE, "Variable A - Destination")
					.withParam(CommandParameter.VARIABLE, "Variable B - Source"))
			.withCommand(new BasicCommandBuilder("comparebanks")
					.withDescription("Compare two banks")
					.withParam(CommandParameter.WORD, "Bank #1")
					.withParam(CommandParameter.WORD, "Bank #2"))
			.withCommand(new BasicCommandBuilder("comparebanktobyte")
					.withDescription("Compares a variable stored in a buffer to a byte value")
					.withParam(CommandParameter.BYTE, "Bank #")
					.withParam(CommandParameter.BYTE, "Byte value to compare variable to"))
			.withCommand(new BasicCommandBuilder("comparebanktofarbyte")
					.withDescription("Compares a bank with a byte at some location")
					.withParam(CommandParameter.BYTE, "Bank #")
					.withParam(CommandParameter.POINTER, "Pointer to a byte value to compare variable to"))
			.withCommand(new BasicCommandBuilder("comparefarbytetobank")
					.withDescription("Compares a byte at some location to a buffered variable. The reverse of comparevartofarbyte")
					.withParam(CommandParameter.POINTER, "Pointer to a byte value to compare B to")
					.withParam(CommandParameter.BYTE, "Bank #"))
			.withCommand(new BasicCommandBuilder("comparefarbytetobyte")
					.withDescription("Compares a byte at some location to a byte value")
					.withParam(CommandParameter.POINTER, "Pointer to a byte value to compare with")
					.withParam(CommandParameter.BYTE, "Byte value to compare with"))
			.withCommand(new BasicCommandBuilder("comparefarbytes")
					.withDescription("Compares a byte at some location to a byte at another location")
					.withParam(CommandParameter.POINTER, "Pointer to a byte value to compare with")
					.withParam(CommandParameter.POINTER, "Pointer to a byte value to compare with"))
			.withCommand(new BasicCommandBuilder("compare")
					.withDescription("Compares variable A to a value")
					.withParam(CommandParameter.VARIABLE, "Variable A")
					.withParam(CommandParameter.WORD, "Value to compare A to"))
			.withCommand(new BasicCommandBuilder("comparevars")
					.withDescription("Compares two variables")
					.withParam(CommandParameter.VARIABLE, "Variable A")
					.withParam(CommandParameter.VARIABLE, "Variable B"))
			.withCommand(new BasicCommandBuilder("callasm")
					.withDescription("Calls a custom ASM routine")
					.withParam(CommandParameter.POINTER, "Address of custom ASM routine"))
			.withCommand(new BasicCommandBuilder("cmd24")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.POINTER, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("special")
					.withDescription("Calls a special event")
					.withParam(CommandParameter.WORD, "Event # to call"))
			.withCommand(new BasicCommandBuilder("special2")
					.withDescription("Like special, but can store a returned value")
					.withParam(CommandParameter.VARIABLE, "Variable to store returned value in")
					.withParam(CommandParameter.WORD, "Special event to call"))
			.withCommand(new BasicCommandBuilder("waitstate")
					.withDescription("Sets the script to a wait state, useful for some specials and commands"))
			.withCommand(new BasicCommandBuilder("pause")
					.withDescription("Pauses script execution for a short amount of time")
					.withParam(CommandParameter.WORD, "Delay"))
			.withCommand(new BasicCommandBuilder("setflag")
					.withDescription("Sets a flag for later use")
					.withParam(CommandParameter.FLAG, "Flag #"))
			.withCommand(new BasicCommandBuilder("clearflag")
					.withDescription("Clears the value of a flag")
					.withParam(CommandParameter.FLAG, "Flag #"))
			.withCommand(new BasicCommandBuilder("checkflag")
					.withDescription("Checks the value of a flag")
					.withParam(CommandParameter.FLAG, "Flag #"))
			.withCommand(new BasicCommandBuilder("cmd2c")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("checkdailyflags")
					.withDescription("Checks the daily flags to see if any of them have been set already, but only if they were set previously. Then it clears those flags. R/S/E only"))
			.withCommand(new BasicCommandBuilder("resetvars")
					.withDescription("Resets the value of variables 0x8000, 0x8001, and 0x8002"))
			.withCommand(new BasicCommandBuilder("sound")
					.withDescription("Plays a sound")
					.withParam(CommandParameter.SOUND_ID, "Sound #"))
			.withCommand(new BasicCommandBuilder("checksound")
					.withDescription("Checks if a sound, fanfare, or song is currently being played"))
			.withCommand(new BasicCommandBuilder("fanfare")
					.withDescription("Plays a song as a fanfare")
					.withParam(CommandParameter.SOUND_ID, "Song # to play"))
			.withCommand(new BasicCommandBuilder("waitfanfare")
					.withDescription("Waits for a fanfare to finish"))
			.withCommand(new BasicCommandBuilder("playsong")
					.withDescription("Switches to another song")
					.withParam(CommandParameter.SOUND_ID, "Song # to play")
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("playsong2")
					.withDescription("Switches to another song")
					.withParam(CommandParameter.SOUND_ID, "Song # to play"))
			.withCommand(new BasicCommandBuilder("fadedefault")
					.withDescription("Gently fades the current music back to the map's default song"))
			.withCommand(new BasicCommandBuilder("fadesong")
					.withDescription("Gently fades into another song")
					.withParam(CommandParameter.SOUND_ID, "Song # to fade to"))
			.withCommand(new BasicCommandBuilder("fadeout")
					.withDescription("Fades out the currently playing song")
					.withParam(CommandParameter.BYTE, "Fading speed"))
			.withCommand(new BasicCommandBuilder("fadein")
					.withDescription("Fades the currently playing song back in")
					.withParam(CommandParameter.BYTE, "Fading speed"))
			.withCommand(new BasicCommandBuilder("warp")
					.withDescription("Warps the player to another map")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("warpmuted")
					.withDescription("Warps the player to another map. No sound effect.")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("warpwalk")
					.withDescription("Warps the player to another map. Walking effect.")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("warphole")
					.withDescription("Warps the player to another map. Hole effect.")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to"))
			.withCommand(new BasicCommandBuilder("warpteleport")
					.withDescription("Warps the player to another map. Teleport effect.")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("warp3")
					.withDescription("Warps the player to another map")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("setwarpplace")
					.withDescription("Sets the place where a warp pointing to warp 127 of map 127.127 warps the player")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("warp4")
					.withDescription("Warps the player to another map")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("warp5")
					.withDescription("Warps the player to another map")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("getplayerpos")
					.withDescription("Gets the current position of the player on the map, and stores it in the specified variables")
					.withParam(CommandParameter.VARIABLE, "Variable to store the X coordinate")
					.withParam(CommandParameter.VARIABLE, "Variable to store the Y coordinate"))
			.withCommand(new BasicCommandBuilder("countpokemon")
					.withDescription("Counts the number of Pokémon in your party, and stores the result in LASTRESULT"))
			.withCommand(new BasicCommandBuilder("additem")
					.withDescription("Adds the quantity of the specified item")
					.withParam(CommandParameter.ITEM_ID, "Item # to add")
					.withParam(CommandParameter.WORD, "Quantity"))
			.withCommand(new BasicCommandBuilder("removeitem")
					.withDescription("Removes the quantity of the specified item")
					.withParam(CommandParameter.ITEM_ID, "Item # to remove")
					.withParam(CommandParameter.WORD, "Quantity"))
			.withCommand(new BasicCommandBuilder("checkitemroom")
					.withDescription("Checks if the player has enough room in the bag for the specified items")
					.withParam(CommandParameter.ITEM_ID, "Item # to check for")
					.withParam(CommandParameter.WORD, "Quantity"))
			.withCommand(new BasicCommandBuilder("checkitem")
					.withDescription("Checks if the player is carrying the specified item")
					.withParam(CommandParameter.ITEM_ID, "Item # to check for")
					.withParam(CommandParameter.WORD, "Quantity"))
			.withCommand(new BasicCommandBuilder("checkitemtype")
					.withDescription("Checks the item type for the specified item, and stores the result in LASTRESULT")
					.withParam(CommandParameter.ITEM_ID, "Item # to check for"))
			.withCommand(new BasicCommandBuilder("addpcitem")
					.withDescription("Adds the quantity of the specified item to the player's PC")
					.withParam(CommandParameter.ITEM_ID, "Item # to add")
					.withParam(CommandParameter.WORD, "Quantity"))
			.withCommand(new BasicCommandBuilder("checkpcitem")
					.withDescription("Checks if the player has the specified item on his/her PC")
					.withParam(CommandParameter.ITEM_ID, "Item # to check")
					.withParam(CommandParameter.WORD, "Quantity"))
			.withCommand(new BasicCommandBuilder("adddecoration")
					.withDescription("Adds a decoration to the player's PC")
					.withParam(CommandParameter.DECORATION_ID, "Decoration #"))
			.withCommand(new BasicCommandBuilder("removedecoration")
					.withDescription("Removes a decoration from the player's PC")
					.withParam(CommandParameter.DECORATION_ID, "Decoration #"))
			.withCommand(new BasicCommandBuilder("testdecoration")
					.withDescription("Tests a specific decoration to see if there's enough room to store it")
					.withParam(CommandParameter.DECORATION_ID, "Decoration #"))
			.withCommand(new BasicCommandBuilder("checkdecoration")
					.withDescription("Checks if a specific decoration is present in the player's PC")
					.withParam(CommandParameter.DECORATION_ID, "Decoration #"))
			.withCommand(new BasicCommandBuilder("applymovement")
					.withDescription("Applies the movement data found at the specified pointer to a sprite")
					.withParam(CommandParameter.WORD, "People # to use")
					.withParam(CommandParameter.POINTER, "Pointer to movement data"))
			.withCommand(new BasicCommandBuilder("applymovementpos")
					.withDescription("Applies the movement data found at the specified pointer to a sprite. Then set the specified X/Y coordinates")
					.withParam(CommandParameter.WORD, "People # to use")
					.withParam(CommandParameter.POINTER, "Pointer to the movement data")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("waitmovement")
					.withDescription("Waits for applymovement to finish")
					.withParam(CommandParameter.WORD, "People # to wait for"))
			.withCommand(new BasicCommandBuilder("waitmovementpos")
					.withDescription("Waits for applymovement to finish. Then set the specified X/Y coordinates")
					.withParam(CommandParameter.WORD, "People # to wait for")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("hidesprite")
					.withDescription("Hides a sprite")
					.withParam(CommandParameter.WORD, "People # to hide"))
			.withCommand(new BasicCommandBuilder("hidespritepos")
					.withDescription("Hides a sprite, then set the specified X/Y coordinates")
					.withParam(CommandParameter.WORD, "People # to hide")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("showsprite")
					.withDescription("Shows a previously vanished sprite")
					.withParam(CommandParameter.WORD, "People # to show"))
			.withCommand(new BasicCommandBuilder("showspritepos")
					.withDescription("Shows a previously vanished sprite. Then set the specified X/Y coordinates")
					.withParam(CommandParameter.WORD, "People # to show")
					.withParam(CommandParameter.BYTE, "X Coordinate")
					.withParam(CommandParameter.BYTE, "Y Coordinate"))
			.withCommand(new BasicCommandBuilder("movesprite")
					.withDescription("Moves a sprite to the specified location")
					.withParam(CommandParameter.WORD, "People # to move")
					.withParam(CommandParameter.WORD, "X coordinate to move to")
					.withParam(CommandParameter.WORD, "Y coordinate to move to"))
			.withCommand(new BasicCommandBuilder("spritevisible")
					.withDescription("Makes the sprite visible at the selected bank and map")
					.withParam(CommandParameter.WORD, "People #")
					.withParam(CommandParameter.BYTE, "Bank #")
					.withParam(CommandParameter.BYTE, "Map #"))
			.withCommand(new BasicCommandBuilder("spriteinvisible")
					.withDescription("Makes the sprite invisible at the selected bank and map")
					.withParam(CommandParameter.WORD, "People #")
					.withParam(CommandParameter.BYTE, "Bank #")
					.withParam(CommandParameter.BYTE, "Map #"))
			.withCommand(new BasicCommandBuilder("faceplayer")
					.withDescription("Turns the caller towards the player"))
			.withCommand(new BasicCommandBuilder("spriteface")
					.withDescription("Changes a facing of a sprite")
					.withParam(CommandParameter.WORD, "People #")
					.withParam(CommandParameter.BYTE, "Facing"))
			//TODO: Add more variants when I rediscover them
			.withVariantCommand(new VariantCommandBuilder("trainerbattle")
					.withParam(CommandParameter.BYTE, "Kind of battle")
					.withVariant(new VariantBuilder(0x0)
					.withDescription("Starts a normal trainer battle")
					.withParam(CommandParameter.WORD, "Battle # to start")
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.POINTER, "Pointer to challenge text")
					.withParam(CommandParameter.POINTER, "Pointer to defeat text"))
					.withVariant(new VariantBuilder(0x1)
					.withDescription("Starts a special trainer battle")
					.withParam(CommandParameter.WORD, "Battle # to start")
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.POINTER, "Pointer to challenge text")
					.withParam(CommandParameter.POINTER, "Pointer to defeat text")
					.withParam(CommandParameter.POINTER, "Pointer to after-defeat script"))
					.withVariant(new VariantBuilder(0x4)
					.withDescription("Starts a double trainer battle")
					.withParam(CommandParameter.WORD, "Battle # to start")
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.POINTER, "Pointer to challenge text")
					.withParam(CommandParameter.POINTER, "Pointer to defeat text")
					.withParam(CommandParameter.POINTER, "Pointer to text to display if the player has one Pokémon"))
			)
			.withCommand(new BasicCommandBuilder("repeattrainerbattle")
					.withDescription("Repeats the last trainer battle started"))
			.withCommand(new BasicCommandBuilder("endtrainerbattle")
					.withDescription("Returns from the trainer battle screen without starting message"))
			.withCommand(new BasicCommandBuilder("endtrainerbattle2")
					.withDescription("Returns from the trainer battle screen without ending message"))
			.withCommand(new BasicCommandBuilder("checktrainerflag")
					.withDescription("Checks if the specified trainer flag is already activated and store the result in LASTRESULT")
					.withParam(CommandParameter.WORD, "Trainer # to check"))
			.withCommand(new BasicCommandBuilder("cleartrainerflag")
					.withDescription("Deactivates the specified trainer flag")
					.withParam(CommandParameter.WORD, "Trainer # to disable"))
			.withCommand(new BasicCommandBuilder("settrainerflag")
					.withDescription("Activates the specified trainer flag")
					.withParam(CommandParameter.WORD, "Trainer # to enable"))
			.withCommand(new BasicCommandBuilder("movesprite2")
					.withDescription("Moves a sprite to the specified location. Permanent change")
					.withParam(CommandParameter.WORD, "People # to move")
					.withParam(CommandParameter.WORD, "X coordinate to move to")
					.withParam(CommandParameter.WORD, "Y coordinate to move to"))
			.withCommand(new BasicCommandBuilder("moveoffscreen")
					.withDescription("Changes the location of the specified sprite to a value which is exactly one tile above the top-left corner of the screen")
					.withParam(CommandParameter.WORD, "People # to move"))
			.withCommand(new BasicCommandBuilder("spritebehave")
					.withDescription("Changes the behavior of a sprite")
					.withParam(CommandParameter.WORD, "People #")
					.withParam(CommandParameter.BYTE, "Behavior #"))
			.withCommand(new BasicCommandBuilder("waitmsg")
					.withDescription("Waits for preparemsg to finish"))
			.withCommand(new BasicCommandBuilder("preparemsg")
					.withDescription("Prepares a pointer to dialogue text for being displayed")
					.withParam(CommandParameter.POINTER, "Pointer to text"))
			.withCommand(new BasicCommandBuilder("closeonkeypress")
					.withDescription("Holds a msgbox open, and closes it on a key press"))
			.withCommand(new BasicCommandBuilder("lockall")
					.withDescription("Locks down movement for all the people on the screen"))
			.withCommand(new BasicCommandBuilder("lock")
					.withDescription("Locks down movement for the caller"))
			.withCommand(new BasicCommandBuilder("releaseall")
					.withDescription("Resumes normal movement for all people on the screen. Closes any previously opened msgboxes as well"))
			.withCommand(new BasicCommandBuilder("release")
					.withDescription("Resumes normal movement for the caller. Closes any previously opened msgboxes as well"))
			.withCommand(new BasicCommandBuilder("waitkeypress")
					.withDescription("Waits until a key is pressed"))
			.withCommand(new BasicCommandBuilder("yesnobox")
					.withDescription("Displays a yes/no box at specified coordinates")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("multichoice")
					.withDescription("Puts up a list of choices for the player to make")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Choice list ID # to use")
					.withParam(CommandParameter.BYTE, "Determines if the B button can be used to cancel"))
			.withCommand(new BasicCommandBuilder("multichoice2")
					.withDescription("Puts up a list of choices for the player to make. A default choice can be set")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Choice list ID # to use")
					.withParam(CommandParameter.BYTE, "Default selected choice")
					.withParam(CommandParameter.BYTE, "Determines if the B button can be used to cancel"))
			.withCommand(new BasicCommandBuilder("multichoice3")
					.withDescription("Puts up a list of choices for the player to make. The number of choices per row can be set")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Choice list ID # to use")
					.withParam(CommandParameter.BYTE, "Number of choices per row")
					.withParam(CommandParameter.BYTE, "Determines if the B button can be used to cancel"))
			.withCommand(new BasicCommandBuilder("showbox")
					.withDescription("Displays a box with the given dimensions")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Width")
					.withParam(CommandParameter.BYTE, "Height"))
			.withCommand(new BasicCommandBuilder("hidebox")
					.withDescription("Hides a displayed box. Ruby/Sapphire only")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Width")
					.withParam(CommandParameter.BYTE, "Height"))
			.withCommand(new BasicCommandBuilder("clearbox")
					.withDescription("Clears a part of a custom box")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Width")
					.withParam(CommandParameter.BYTE, "Height"))
			.withCommand(new BasicCommandBuilder("showpokepic")
					.withDescription("Displays a Pokémon in a picture box")
					.withParam(CommandParameter.POKEMON_ID, "Pokémon species to display")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("hidepokepic")
					.withDescription("Hides a Pokémon picture box previously shown"))
			.withCommand(new BasicCommandBuilder("showcontestwinner")
					.withDescription("Shows the picture of the winner of set contest")
					.withParam(CommandParameter.BYTE, "Contest #"))
			.withCommand(new BasicCommandBuilder("braille")
					.withDescription("Displays a braille box")
					.withParam(CommandParameter.POINTER, "Pointer to braille data"))
			.withCommand(new BasicCommandBuilder("givepokemon")
					.withDescription("Gives the player a Pokémon")
					.withParam(CommandParameter.POKEMON_ID, "Pokémon species to give")
					.withParam(CommandParameter.BYTE, "Level of the Pokémon")
					.withParam(CommandParameter.ITEM_ID, "Item # to be held")
					.withParam(CommandParameter.DOUBLE, "Filler")
					.withParam(CommandParameter.DOUBLE, "Filler")
					.withParam(CommandParameter.BYTE, "Filler"))
			.withCommand(new BasicCommandBuilder("giveegg")
					.withDescription("Gives the player an egg of the specified Pokémon")
					.withParam(CommandParameter.POKEMON_ID, "Pokémon species to give"))
			.withCommand(new BasicCommandBuilder("setpkmnpp")
					.withDescription("Sets a new amount of PP for the specified Pokémon in the player's party")
					.withParam(CommandParameter.BYTE, "Pokémon slot")
					.withParam(CommandParameter.BYTE, "Attack slot")
					.withParam(CommandParameter.WORD, "PP amount"))
			.withCommand(new BasicCommandBuilder("checkattack")
					.withDescription("Check if at least one Pokémon in the party has a particular attack")
					.withParam(CommandParameter.MOVE_ID, "Attack # to check"))
			.withCommand(new BasicCommandBuilder("bufferpokemon")
					.withDescription("Stores a Pokémon name within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.POKEMON_ID, "Pokémon species to store"))
			.withCommand(new BasicCommandBuilder("bufferfirstpokemon")
					.withDescription("Stores the first Pokémon name in the player's party within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #"))
			.withCommand(new BasicCommandBuilder("bufferpartypokemon")
					.withDescription("Stores the selected Pokémon's name in the player's party within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Pokemon slot"))
			.withCommand(new BasicCommandBuilder("bufferitem")
					.withDescription("Stores an item name within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.ITEM_ID, "Item # to store"))
			.withCommand(new BasicCommandBuilder("bufferdecoration")
					.withDescription("Stores a decoration name within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.DECORATION_ID, "Decoration # to store"))
			.withCommand(new BasicCommandBuilder("bufferattack")
					.withDescription("Stores an attack name within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.MOVE_ID, "Attack # to store"))
			.withCommand(new BasicCommandBuilder("buffernumber")
					.withDescription("Stores a variable value within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.VARIABLE, "Variable to store"))
			.withCommand(new BasicCommandBuilder("bufferstd")
					.withDescription("Stores a standard string within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.WORD, "Standard string #"))
			.withCommand(new BasicCommandBuilder("bufferstring")
					.withDescription("Stores a string within a specified buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.POINTER, "Pointer to the string to store"))
			.withCommand(new BasicCommandBuilder("pokemart")
					.withDescription("Opens the Pokémart shop system with the item list found at the selected pointer")
					.withParam(CommandParameter.POINTER, "Pointer to the item list"))
			.withCommand(new BasicCommandBuilder("pokemart2")
					.withDescription("Opens the Pokémart shop system with the item list found at the selected pointer")
					.withParam(CommandParameter.POINTER, "Pointer to the item list"))
			.withCommand(new BasicCommandBuilder("pokemart3")
					.withDescription("Opens the Pokémart shop system with the item list found at the selected pointer")
					.withParam(CommandParameter.POINTER, "Pointer to the item list"))
			.withCommand(new BasicCommandBuilder("pokecasino")
					.withDescription("Opens the casino system")
					.withParam(CommandParameter.VARIABLE, "Variable #"))
			.withCommand(new BasicCommandBuilder("cmd8a")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("choosecontestpkmn")
					.withDescription("Opens up a menu for choosing a contest Pokémon"))
			.withCommand(new BasicCommandBuilder("startcontest")
					.withDescription("Start a Pokémon contest"))
			.withCommand(new BasicCommandBuilder("showcontestresults")
					.withDescription("Shows Pokémon contest results"))
			.withCommand(new BasicCommandBuilder("contestlinktransfer")
					.withDescription("Establishes a connection using the wireless adapter. Emerald only"))
			.withCommand(new BasicCommandBuilder("random")
					.withDescription("Generates a random number, storing it in LASTRESULT")
					.withParam(CommandParameter.WORD, "Total possibilities"))
			.withCommand(new BasicCommandBuilder("givemoney")
					.withDescription("Gives the player some money")
					.withParam(CommandParameter.DOUBLE, "Money quantity to give")
					.withParam(CommandParameter.BYTE, "Command execution check"))
			.withCommand(new BasicCommandBuilder("paymoney")
					.withDescription("Takes some money from the player")
					.withParam(CommandParameter.DOUBLE, "Money quantity to pay")
					.withParam(CommandParameter.BYTE, "Command execution check"))
			.withCommand(new BasicCommandBuilder("checkmoney")
					.withDescription("Checks if the player has a specified amount of money")
					.withParam(CommandParameter.DOUBLE, "Money quantity to check")
					.withParam(CommandParameter.BYTE, "Command execution check"))
			.withCommand(new BasicCommandBuilder("showmoney")
					.withDescription("Shows the money counter on set coordinates")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Command execution check"))
			.withCommand(new BasicCommandBuilder("hidemoney")
					.withDescription("Hides the money counter")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("updatemoney")
					.withDescription("Updates the amount of money displayed in the money counter")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Command execution check"))
			.withCommand(new BasicCommandBuilder("cmd96")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("fadescreen")
					.withDescription("Fades the screen in or out")
					.withParam(CommandParameter.BYTE, "Fade effect"))
			.withCommand(new BasicCommandBuilder("fadescreendelay")
					.withDescription("Fades the screen in or out, after some delay")
					.withParam(CommandParameter.BYTE, "Fade effect")
					.withParam(CommandParameter.BYTE, "Delay"))
			.withCommand(new BasicCommandBuilder("darken")
					.withDescription("Calls flash animation that darkens the area. Must be called from a level script")
					.withParam(CommandParameter.WORD, "Flash size"))
			.withCommand(new BasicCommandBuilder("lighten")
					.withDescription("Calls flash animation that lightens the area")
					.withParam(CommandParameter.WORD, "Flash size"))
			.withCommand(new BasicCommandBuilder("preparemsg2")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.POINTER, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("doanimation")
					.withDescription("Executes the specified move animation")
					.withParam(CommandParameter.WORD, "Animation #"))
			.withCommand(new BasicCommandBuilder("setanimation")
					.withDescription("Sets the move animation")
					.withParam(CommandParameter.BYTE, "Animation #")
					.withParam(CommandParameter.VARIABLE, "Variable to use"))
			.withCommand(new BasicCommandBuilder("checkanimation")
					.withDescription("Checks whether an animation is currently being played or not. If so, it'll pause until the animation is done")
					.withParam(CommandParameter.WORD, "Animation #"))
			.withCommand(new BasicCommandBuilder("sethealingplace")
					.withDescription("Sets the place where the player goes once they are out of usable Pokémon")
					.withParam(CommandParameter.WORD, "Flightspot #"))
			.withCommand(new BasicCommandBuilder("checkgender")
					.withDescription("Checks if the player is a boy or a girl and stores it in LASTRESULT"))
			.withCommand(new BasicCommandBuilder("cry")
					.withDescription("Plays back the cry of a Pokémon")
					.withParam(CommandParameter.POKEMON_ID, "Pokémon species #")
					.withParam(CommandParameter.WORD, "Effect #"))
			.withCommand(new BasicCommandBuilder("setmaptile")
					.withDescription("Sets a tile on the map. You must somehow refresh that part")
					.withParam(CommandParameter.WORD, "X coordinate")
					.withParam(CommandParameter.WORD, "Y coordinate")
					.withParam(CommandParameter.WORD, "Tile #")
					.withParam(CommandParameter.WORD, "Tile attribute"))
			.withCommand(new BasicCommandBuilder("resetweather")
					.withDescription("Prepares to fade the weather into the default type"))
			.withCommand(new BasicCommandBuilder("setweather")
					.withDescription("Prepares to fade the weather into the type specified")
					.withParam(CommandParameter.WORD, "New weather"))
			.withCommand(new BasicCommandBuilder("doweather")
					.withDescription("Triggers the weather change set with setweather/resetweather"))
			.withCommand(new BasicCommandBuilder("cmda6")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("setmapfooter")
					.withDescription("Changes the current map footer loading to a new one. The map must be refreshed afterwards in order to work fine")
					.withParam(CommandParameter.WORD, "Footer #"))
			.withCommand(new BasicCommandBuilder("spritelevelup")
					.withDescription("Makes the specified sprite go up one level at the selected bank and map")
					.withParam(CommandParameter.WORD, "People #")
					.withParam(CommandParameter.BYTE, "Bank #")
					.withParam(CommandParameter.BYTE, "Map #")
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("restorespritelevel")
					.withDescription("Restores the original level of the specified sprite at the specified bank and map")
					.withParam(CommandParameter.WORD, "People #")
					.withParam(CommandParameter.BYTE, "Bank #")
					.withParam(CommandParameter.BYTE, "Map #"))
			.withCommand(new BasicCommandBuilder("createsprite")
					.withDescription("Creates a virtual sprite in the current map")
					.withParam(CommandParameter.BYTE, "Sprite # to use")
					.withParam(CommandParameter.BYTE, "Virtual people #")
					.withParam(CommandParameter.WORD, "X coordinate")
					.withParam(CommandParameter.WORD, "Y coordinate")
					.withParam(CommandParameter.BYTE, "Behavior")
					.withParam(CommandParameter.BYTE, "Facing"))
			.withCommand(new BasicCommandBuilder("spriteface2")
					.withDescription("Changes a facing of a virtual sprite")
					.withParam(CommandParameter.BYTE, "Virtual people #")
					.withParam(CommandParameter.BYTE, "Facing"))
			.withCommand(new BasicCommandBuilder("setdooropened")
					.withDescription("Prepares a door to be opened")
					.withParam(CommandParameter.WORD, "X coordinate")
					.withParam(CommandParameter.WORD, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("setdoorclosed")
					.withDescription("Prepares a door to be closed")
					.withParam(CommandParameter.WORD, "X coordinate")
					.withParam(CommandParameter.WORD, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("doorchange")
					.withDescription("Changes the state of the selected door"))
			.withCommand(new BasicCommandBuilder("setdooropened2")
					.withDescription("Prepares a door to be opened. No animation")
					.withParam(CommandParameter.WORD, "X coordinate")
					.withParam(CommandParameter.WORD, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("setdoorclosed2")
					.withDescription("Prepares a door to be closed. No animation")
					.withParam(CommandParameter.WORD, "X coordinate")
					.withParam(CommandParameter.WORD, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("cmdb1")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER)
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("cmdb2")
					.withDescription(UNKNOWN_COMMAND))
			.withCommand(new BasicCommandBuilder("checkcoins")
					.withDescription("Checks the actual amount of coins, and stores it on a specified variable")
					.withParam(CommandParameter.VARIABLE, "Variable to use"))
			.withCommand(new BasicCommandBuilder("givecoins")
					.withDescription("Gives the player a specified quantity of coins")
					.withParam(CommandParameter.WORD, "Number of coins to give"))
			.withCommand(new BasicCommandBuilder("removecoins")
					.withDescription("Removes a specified quantity of coins")
					.withParam(CommandParameter.WORD, "Number of coins to remove"))
			.withCommand(new BasicCommandBuilder("setwildbattle")
					.withDescription("Prepares to start a battle with a specified Pokémon, level, and item")
					.withParam(CommandParameter.POKEMON_ID, "Pokémon species")
					.withParam(CommandParameter.BYTE, "Level of the Pokémon")
					.withParam(CommandParameter.ITEM_ID, "Item # to be held"))
			.withCommand(new BasicCommandBuilder("dowildbattle")
					.withDescription("Triggers the battle specified by setbattle"))
			.withCommand(new BasicCommandBuilder("setvirtualaddress")
					.withDescription("Jumps to a specified value - value at 0x020375C4 in RAM, continuing execution from there")
					.withParam(CommandParameter.DOUBLE, "Value"))
			.withCommand(new BasicCommandBuilder("virtualgoto")
					.withDescription("Jumps to a custom function")
					.withParam(CommandParameter.POINTER, "Pointer to custom function"))
			.withCommand(new BasicCommandBuilder("virtualcall")
					.withDescription("Calls a custom function")
					.withParam(CommandParameter.POINTER, "Pointer to custom function"))
			.withCommand(new BasicCommandBuilder("virtualgotoif")
					.withDescription("Jumps to a custom function, conditional version")
					.withParam(CommandParameter.BYTE, "Condition")
					.withParam(CommandParameter.POINTER, "Pointer to custom function"))
			.withCommand(new BasicCommandBuilder("virtualcallif")
					.withDescription("Calls a custom function, conditional version")
					.withParam(CommandParameter.BYTE, "Condition")
					.withParam(CommandParameter.POINTER, "Pointer to custom function"))
			.withCommand(new BasicCommandBuilder("virtualmsgbox")
					.withDescription("Prepares a pointer to dialogue text for use")
					.withParam(CommandParameter.POINTER, "Pointer to text"))
			.withCommand(new BasicCommandBuilder("virtualloadpointer")
					.withDescription("Prepares a pointer to dialogue text for use")
					.withParam(CommandParameter.POINTER, "Pointer to text"))
			.withCommand(new BasicCommandBuilder("virtualbuffer")
					.withDescription("Stores a custom string within a buffer")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.POINTER, "Pointer to the string to store"))
			.withCommand(new BasicCommandBuilder("showcoins")
					.withDescription("Shows the coin counter at set coordinates")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("hidecoins")
					.withDescription("Hides the coin counter")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("updatecoins")
					.withDescription("Updates the amount of coins displayed in the coin counter")
					.withParam(CommandParameter.BYTE, "X coordinate")
					.withParam(CommandParameter.BYTE, "Y coordinate"))
			.withCommand(new BasicCommandBuilder("cmdc3")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("warp6")
					.withDescription("Warps the player to another map")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("waitcry")
					.withDescription("Waits for cry to finish"))
			.withCommand(new BasicCommandBuilder("bufferboxname")
					.withDescription("Stores the name of a PC box within a specified buffer")
					.withParam(CommandParameter.WORD, "PC Box # to store"))
			.withCommand(new BasicCommandBuilder("textcolor")
					.withDescription("Changes the text color used. FR/LG only")
					.withParam(CommandParameter.BYTE, "Color #"))
			.withCommand(new BasicCommandBuilder("cmdc8")
					.withDescription(UNKNOWN_COMMAND))
			.withCommand(new BasicCommandBuilder("cmdc9")
					.withDescription(UNKNOWN_COMMAND))
			.withCommand(new BasicCommandBuilder("signmsg")
					.withDescription("Changes the graphics used by msgboxes in order to make them look like signs. FR/LG only"))
			.withCommand(new BasicCommandBuilder("normalmsg")
					.withDescription("Clears the effect of the signmsg command. FR/LG only"))
			.withCommand(new BasicCommandBuilder("comparehiddenvar")
					.withDescription("Compares the value of a chosen hidden variable. FR/LG only")
					.withParam(CommandParameter.BYTE, "Variable #")
					.withParam(CommandParameter.WORD, "Value to compare variable to"))
			.withCommand(new BasicCommandBuilder("setobedience")
					.withDescription("Sets the specified Pokémon in the player's party as obedient")
					.withParam(CommandParameter.WORD, "Pokémon #"))
			.withCommand(new BasicCommandBuilder("checkobedience")
					.withDescription("Checks if the specified Pokémon in the player's party is obedient or not. The result is stored in LASTRESULT")
					.withParam(CommandParameter.WORD, "Pokémon #"))
			.withCommand(new BasicCommandBuilder("executeram")
					.withDescription("Calculates the current location of the RAM script area and passes the execution to that offset"))
			.withCommand(new BasicCommandBuilder("setworldmapflag")
					.withDescription("Sets the flag used to allow the player to fly to a specific place. FR/LG only")
					.withParam(CommandParameter.WORD, "Flag #"))
			.withCommand(new BasicCommandBuilder("warpteleport2")
					.withDescription("Warps the player to another map. Teleport effect")
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("setcatchlocation")
					.withDescription("Changes the catch location for the specified Pokémon in player's party")
					.withParam(CommandParameter.WORD, "Pokémon #")
					.withParam(CommandParameter.BYTE, "Catch location #"))
			.withCommand(new BasicCommandBuilder("braille2")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.POINTER, "Pointer to braille data"))
			.withCommand(new BasicCommandBuilder("bufferitems")
					.withDescription("Stores a plural item name within a specified buffer. FR/LG only")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.ITEM_ID, "Item # to store")
					.withParam(CommandParameter.WORD, "Quantity"))
			.withCommand(new BasicCommandBuilder("cmdd5")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.WORD, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("cmdd6")
					.withDescription(UNKNOWN_COMMAND))
			.withCommand(new BasicCommandBuilder("warp7")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("cmdd8")
					.withDescription(UNKNOWN_COMMAND))
			.withCommand(new BasicCommandBuilder("cmdd9")
					.withDescription(UNKNOWN_COMMAND))
			.withCommand(new BasicCommandBuilder("hidebox2")
					.withDescription("Hides a displayed box. Emerald only"))
			.withCommand(new BasicCommandBuilder("preparemsg3")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.POINTER, "Pointer to text"))
			.withCommand(new BasicCommandBuilder("fadescreen3")
					.withDescription("Fades the screen in or out. Emerald only")
					.withParam(CommandParameter.BYTE, UNKNOWN_PARAMETER))
			.withCommand(new BasicCommandBuilder("buffertrainerclass")
					.withDescription("Stores the name of the selected trainer class within a specified buffer. Emerald only")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.WORD, "Trainer class #"))
			.withCommand(new BasicCommandBuilder("buffertrainername")
					.withDescription("Stores the name of the selected trainer within a specified buffer. Emerald only")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.WORD, "Trainer #"))
			.withCommand(new BasicCommandBuilder("pokenavcall")
					.withDescription("Displays a Pokénav call. Emerald only")
					.withParam(CommandParameter.POINTER, "Pointer to text"))
			.withCommand(new BasicCommandBuilder("warp8")
					.withDescription(UNKNOWN_COMMAND)
					.withParam(CommandParameter.BYTE, "Bank # to warp to")
					.withParam(CommandParameter.BYTE, "Map # to warp to")
					.withParam(CommandParameter.BYTE, "Exit # to warp to")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "X coordinate")
					.withParam(new OrParameter.Sized(CommandParameter.VARIABLE, CommandParameter.WORD), "Y coordinate"))
			.withCommand(new BasicCommandBuilder("buffercontesttype")
					.withDescription("Stores the name of the selected contest type within a specified buffer. Emerald only")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.WORD, "Contest type"))
			.withCommand(new BasicCommandBuilder("bufferitems2")
					.withDescription("Stores a plural item name within a specified buffer. Emerald only")
					.withParam(CommandParameter.BYTE, "Buffer #")
					.withParam(CommandParameter.ITEM_ID, "Item # to store")
					.withParam(CommandParameter.WORD, "Quantity"))
			.build();

    public static void main(String[] args) {
        System.out.println("H!");
    }
}
